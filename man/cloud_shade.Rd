% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_clouds.R
\name{cloud_shade}
\alias{cloud_shade}
\title{Render Clouds}
\usage{
cloud_shade(
  heightmap,
  start_altitude = 1000,
  end_altitude = 2000,
  sun_altitude = 90,
  sun_angle = 315,
  cloud_cover = 0.5,
  layers = 10,
  frequency = 0.005,
  fractal_levels = 16,
  attenuation_coef = 1,
  seed = 1,
  zscale = 1
)
}
\arguments{
\item{heightmap}{A two-dimensional matrix, where each entry in the matrix is the elevation at that point. This is used by `render_clouds()` to 
calculate the regions the clouds should be rendered in.}

\item{start_altitude}{Default `1000`. The bottom of the cloud layer.}

\item{end_altitude}{Default `2000`. The top of the cloud layer.}

\item{sun_altitude}{Default `10`. The angle, in degrees (as measured from the horizon) from which the light originates.}

\item{sun_angle}{Default `315` (NW). The angle, in degrees, around the matrix from which the light originates. Zero degrees is North, increasing clockwise}

\item{cloud_cover}{Default `0.5`. The percentage of cloud cover.}

\item{layers}{Default `90`. The number of layers to render the cloud layer.}

\item{frequency}{Default `0.005`. The base frequency of the noise used to calculate the fractal cloud structure.}

\item{fractal_levels}{Default `16`. The fractal dimension used to calculate the noise. Higher values give more fine structure, but take longer to calculate.}

\item{attenuation_coef}{Default `1`. Amount of attenuation in the cloud (higher numbers give darker shadows). This value is automatically scaled to account for increasing the number of layers.}

\item{seed}{Default `1`. Random seed used to generate clouds.}

\item{zscale}{Default `1`. The ratio between the x and y spacing (which are assumed to be equal) and the z axis. For example, if the elevation levels are in units
of 1 meter and the grid values are separated by 10 meters, `zscale` would be 10.}
}
\value{
A 2D shadow matrix.
}
\description{
Render a 3D floating cloud layer of the map.

Note: Underlying layers with transparency can cause rendering issues in rgl.
}
\examples{
\dontrun{
#Render a cloud layer
}
}
